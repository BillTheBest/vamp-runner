---
kind: breed
name: runner-requester
deployable:
  type: application/javascript
  definition: |
    'use strict';

    var http = require('request');
    var vamp = require('vamp-node-client');

    var api = new vamp.Api();

    var vga;

    var process = function () {
      if (!vga) {
        api.config(function (config) {
          vga = config['vamp.gateway-driver.host'];
        });
      } else burst();
    };

    var interval = setInterval(process, 1000);

    function burst() {

      var count = 0;
      var count1 = 0;
      var count2 = 0;

      clearTimeout(interval);

      for (var i = 0; i < 50; i++) {

        http('http://' + vga + ':9056/2', function (error, response, body) {
          if (!error && response.statusCode == 200) {
            count++;
            var result = JSON.parse(body);
            if (result['id'] === '1.0.0' || result['id'] === '2.0.0') {
              if (result['id'] === '1.0.0') count1++;
              if (result['id'] === '2.0.0') count2++;

              if (count === 50) {
                var p1 = 100.0 * count1 / count;
                var p2 = 100.0 * count2 / count;
                if (p1 > 41 || p1 < 39 || p2 > 61 || p2 < 59)
                  api.event(['workflows:runner-requester', 'response:error'], p1 + '% / ' + p2 + '%');
                else
                  api.event(['workflows:runner-requester', 'response:ok'], p1 + '% / ' + p2 + '%');
              }

            } else {
              api.event(['workflows:runner-requester', 'response:failed'], body);
            }
          }
        });
      }

      interval = setInterval(process, 5000);
    }

---
kind: workflow
name: runner-requester
breed: runner-requester
schedule: daemon