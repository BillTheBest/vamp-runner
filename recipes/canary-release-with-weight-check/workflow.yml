---
kind: breed
name: runner-requester
deployable:
  type: application/javascript
  definition: |
    'use strict';

    var http = require('request');
    var vamp = require('vamp-node-client');

    var api = new vamp.Api();

    var vga;

    var process = function () {
      if (!vga) {
        api.config(function (config) {
          vga = config['vamp.gateway-driver.host'];
        });
      } else burst();
    };

    var interval = setInterval(process, 1000);

    var target = 0;

    function burst() {

      var count = 0;
      var count1 = 0;
      var count2 = 0;

      clearTimeout(interval);

      for (var i = 0; i < 50; i++) {

        http('http://' + vga + ':9059', function (error, response, body) {
          if (!error && response.statusCode == 200) {
            count++;
            var result = JSON.parse(body);
            if (result['id'] === '1.0.0' || result['id'] === '2.0.0') {
              if (result['id'] === '1.0.0') count1++;
              if (result['id'] === '2.0.0') count2++;

              if (count === 50) {
                var p1 = 100.0 * count1 / count;
                var p2 = 100.0 * count2 / count;

                if (p2 < target + 1 && p2 > target -1) {
                  api.event(['workflows:runner-requester', 'response:ok'], p1 + '% / ' + p2 + '%');

                  target += 20;

                  if (target <= 100) {

                    api.event(['workflows:runner-requester', 'action:weight'],
                      (120 - target) + '% / ' + (target - 20) +
                        '% => ' + (100 - target) + '% / ' + target + '%');

                    http({
                      url: api.url + 'gateways/runner/runner/port',
                      method: 'GET',
                      headers: {'Accept': 'application/json', 'Content-Type': 'application/json'}
                    }, function (error, response, body) {
                        if (!error && response.statusCode == 200) {
                          var gateway = JSON.parse(body);

                          gateway['routes']['runner/runner/runner:1/port']['weight'] = (100 - target) + '%';
                          gateway['routes']['runner/runner/runner:2/port']['weight'] = target + '%';

                          http({
                            url: api.url + 'gateways/runner/runner/port',
                            method: 'PUT',
                            json: gateway
                            }, function (error, response, body) {
                              if (error) api.event(['workflows:runner-requester', 'response:failed'], body);
                          });
                        } else api.event(['workflows:runner-requester', 'response:failed'], body);
                    });
                  } else target = 100;
                }
              }

            } else {
              // TODO reverting weights back
              api.event(['workflows:runner-requester', 'response:failed'], body);
            }
          }
        });
      }

      interval = setInterval(process, 5000);
    }

---
kind: workflow
name: runner-requester
breed: runner-requester
schedule: daemon